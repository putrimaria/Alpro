/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pancake;
 
import java.util.Scanner;

public class Pancake{
   int[] tump;
   
  Pancake(int[] input) {
      tump = input;
      sort(input.length, 1);
  }
   
    public String toString() {
      String info = "";
      for (int x: tump)
         info += x + " ";
      return info;
    }

     public void flip(int n) {
      for (int i = 0; i < n+1/2; ++i) {
         int tmp = tump[i];
         tump[i] = tump[n-i];
         tump[n-i] = tmp;
      }
      System.out.println("flip(0.." + n + "): " + toString());
   }

   public int[] minmax(int n) {
      int min, max;
      min = max = tump[0];
      int kecil = 0; 
      int besar = 0;
     

      for (int i = 1; i < n; ++i) {
         if (tump[i] < min) {
            min = tump[i];
            kecil = i;
         }
         else if (tump[i] > max) {
            max = tump[i];
            besar = i;
         }
      }
      int [] a = {kecil,besar};
      return a;
   }

   public  void sort(int n, int dir) {
      if (n == 0) 
          return;

      int[] mM        = minmax(n);
      int pos         = mM[dir];
      int mpos        = mM[1-dir];
      boolean flipped = false;

      if (pos == n-1) {
         --n;
      }
      else if (pos == 0) {
         flip(n-1);
         
      }
      else if (mpos == n-1) {
         dir = 1-dir;
         --n;
         flipped = true;
         
      }else {
          
         flip(pos);
      }
      
      sort(n, dir);

      if (flipped) {
         flip(n);
         
      }
      
   }

   public static void main(String[] args) {
       Scanner a= new Scanner(System.in);
       
       System.out.println("masukkan jumlah tumpukan pancakes dari 1-30");
       int c= a.nextInt();
       
        if(c>30 || c<0){
           System.out.println("masukkan jumlah sesuai hint");
           c= a.nextInt();
       }
        
       System.out.println("masukkan panjang Diameter pancakes ");
       int [] b= new int [c];
       
       System.out.println("masukkan tumpukan");
       
          for(int i=0; i< b.length;i++){
              System.out.println("ke : "+ i);
              b[i]=a.nextInt();
              
            if(b[i]> 100){
                System.out.println("masukkan Diameter dari 1-100");
                b[i]=a.nextInt();
            }
            
          }
    Pancake ne = new Pancake(b); 
    }
}
/*class Solve {
    
    int[] P;
    
    public int[] Solve(int[] stack){
        P = stack;
        int Q = 0;
        int next = P.length - 1;
        int[] flips = new int[58];
        while(!isSorted()){
            int largest = 0;
            int largestIndex = 0;
            for(int i = next; i >= 0; i--){
                if(P[i] > largest){
                    largest = P[i];
                    largestIndex = i;
                }
            }
            if(largestIndex != 0){
                flip(largestIndex);
                flips[Q] = (P.length - largestIndex);
                Q++;
            }
            if(!isSorted()){
                flip(next);
                flips[Q] = P.length - next;
                Q++;
                next--;
            }
        }
        
        return flips;
    }
    
    public boolean isSorted(){
        boolean sorted = true;
        for(int i = 1; i < P.length; i++){
            if(P[i-1] > P[i]){
                sorted = false;
            }
        }
        return sorted;
    }
    
    public void flip(int bFlip){
        int[] holder = new int[bFlip + 1];
        for(int i = 0; i < holder.length; i++){
            holder[i] = P[i];
        }
        for(int i = 0; i < holder.length; i++){
            P[holder.length - i -1] = holder[i];
        }
    }
    
    public static void main(String[] args) {
        Solve m=new Solve();
        Scanner input = new Scanner(System.in);
        while(input.hasNextLine()){
            int[] flips;
            String newStack = "";
            String oldStack = input.nextLine();
            String[] temp = oldStack.split(" ");
            int[] stack = new int[temp.length];
            for(int i = 0; i < temp.length; i++){
                stack[i] = Integer.parseInt(temp[i]);
            }
            flips = m.Solve(stack);
            System.out.println("" + oldStack);
                for(int i = 0; flips[i] != 0 && i < flips.length; i++){
                    newStack += flips[i] + " ";
                }
            newStack += 0;
            System.out.println("" + newStack);
        }
    }
    
} 
/*public class Pancake {
    
    int[] tumpuk;
   
    public Pancake(int [] size) {
        tumpuk = size;
        int batas = 0;
        int[] flips = new int[30];
        int next = tumpuk.length - 1; 
        
        
        /*while(!isSorted());{    
        for (int i = 0; i<tumpuk.length; i++) {
            if (tumpuk[i] > largest) {
                largest = tumpuk[i];
                largestIndex = i;
                }
            }
        if (largestIndex!= 0) { //karena apabila largestIndex = 0, berarti bilangan terbesar pada stack tersebut sudah berada 
            //pada tempatnya
                    flip(largestIndex);
                    flips[batas] = (tumpuk.length - largestIndex);
                    batas++;
        }
        if(!isSorted()){
                    flip(next);
                    flips[batas] = tumpuk.length - next;
                    batas++;
                    next--;
                }
        return flips;
        }
        
    }*/
    
    /*public void input() {
        System.out.println("Masukan jumlah tumpukan: ");
        jumTump = masuk.nextInt();
        if (jumTump > 30 || jumTump < 0) {
            System.out.println("Angka yang dimasukan salah, silahkan ulangi.");
            input();
                }
        tumpuk = new int [jumTump];
        }
    
    
    public void diameter() {
        for (int a=0; a<jumTump; a++) {
            System.out.println("Masukan diameter ke-" + (a+1) + ": ");
            tumpuk[a] = masuk.nextInt();
        }
    }
    }
    
    public void flip(int index){
        int[] holder = new int[index + 1]; //membuat array baru untuk menyimpan isi array sementara
        for(int i = 0; i < holder.length; i++){ 
            holder[i] = tumpuk[i]; //mengisi array holder dengan bilangan dari array tumpuk
        }
        for(int i = 0; i < holder.length; i++){
            tumpuk[holder.length - i -1] = holder[i]; //proses flipping terjadi disini, nilai dari array holder masuk ke 
            //array tumpuk
        }
        for(int i=0; i < tumpuk.length; i++) {
            System.out.println(tumpuk[i] + "/n");
        }
    }
    
    public void minmax() {    
        int largest = 0; 
        int largestIndex = 0;
        int[] flips = new int[30];
        for (int i = 0; i<tumpuk.length; i++) {
            if (tumpuk[i] > largest) {
                largest = tumpuk[i];
                largestIndex = i;
                }
            }

        if (largestIndex!= 0) { //karena apabila largestIndex = 0, berarti bilangan terbesar pada stack tersebut sudah berada 
            //pada tempatnya
                    flip(largestIndex);
                    flips[batas] = (tumpuk.length - largestIndex);
                    batas++;
        }
        if(!isSorted()){
                    flip(next);
                    flips[batas] = tumpuk.length - next;
                    batas++;
                    next--;
                }
        }
    }
    
    public boolean isSorted(){
        boolean sorted = true;
        for(int i = 1; i < tumpuk.length; i++){
            if(tumpuk[i-1] > tumpuk[i]){
                sorted = false;
            }
        }
        return sorted;
    }

    public static void main(String[]args) {
        Pancake hai = new Pancake(5);
    }
}*/
